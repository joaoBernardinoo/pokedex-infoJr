import Head from 'next/head';
import Pokedex from '../components/pokedex';
import LoginModal from '@/components/auth';
import { useUser } from '@auth0/nextjs-auth0/client';
import { FavoriteProvider } from '@/contexts/favoritesContext';
import { useState, useEffect } from 'react';

export default function Home() {
  const { user, error, isLoading } = useUser();
  // array de favoritos que contém os id's dos pokemons.
  const [favorites, setFavorites] = useState<number[]>([]);
  const [userId, setUserId] = useState<number>();


  // -------------------------
  // FUNÇÕES
  
  // att os pokemons favoritos
  const updateFavoritePokemons = async (id: number) => { 
    const updatedFavorites = [...favorites];
    const favoriteIndex = favorites.indexOf(id);

    // se clica de novo quando o pokemon ja é favorito, vai removê-lo
    if (favoriteIndex >= 0) {
      updatedFavorites.splice(favoriteIndex, 1);

      // se tiver logado tem que atualizar o banco de dados
      if (user){
        try {
          const res = await fetch('./api/favorite', {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: userId,
              pokemonId: id,
            })
          });
        
          if (!res.ok){
            throw new Error('Erro ao remover favorito');
          }
        } catch (error) {
          console.error('Erro:', error);
        }
      }

    } else {
      updatedFavorites.push(id);
      
      if (user){
        try {
          const res = await fetch('./api/favorite', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              userId: userId,
              pokemonId: id,
            })
          });

          if (!res.ok){
            throw new Error('Erro ao adicionar favorito');
          }
        } catch (error) {
          console.error('Erro:', error);
        }
      }
    }
    setFavorites(updatedFavorites);
  };

  // procura o id do user q logou
  const loginDataHandler = async () =>{
    // se logou
    if (user){
      // procura se tem usuário no banco de dados com esse email
      try {
        const res = await fetch(`./api/user?email=${user.email}`);

        if (!res.ok) {
          throw new Error('Erro na solicitação de verificação de usuário');
        }

        const data = await res.json();
        // se tem, pega o id para mostrar os favoritos
        if(data.success && data.data.userExists){
          setUserId(data.data.userId);
        }
        // se não, cria o usuário
        else{
          const createRes = await fetch('./api/user', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: user.email,
            })
          });

          if (!createRes.ok){
            throw new Error('Erro na solicitação de criação de usuário');
          }

          const dataUser = await createRes.json();
          if(dataUser.success){
            setUserId(dataUser.data.id);
          }
        }
      } catch (error) {
        console.error('Erro ao fazer a solicitação:', error);
      }
    }

    // se não, a tela permanece a mesma
  }

  // pega os favoritos do database
  const getFavoritePokemons = async (userId: number | undefined) => {
    // se ta logado
    if (user && userId){
      try {
        console.log("na função get o id é ", userId);
        const res = await fetch(`./api/favorite?userId=${userId}`);
        
        if (!res.ok) {
          throw new Error('Erro ao buscar favoritos');
        }

        const data = await res.json();
        setFavorites(data.favorites);

      } catch (error) {
        console.error('Erro:', error);
      }
    };
  }

  // ---------------------------------------
  // EFEITOS DINÂMICOS

  // ao logar, seta o userID
  useEffect(() => {
    loginDataHandler();
  }, [user]);

  // ao mudar de usuário, traz os seus favoritos pra página
  useEffect(() => {
    getFavoritePokemons(userId);
  }, [userId]);
  


  return (
    <FavoriteProvider
        value={{
          favoritePokemons: favorites,
          updateFavoritePokemons: updateFavoritePokemons,
        }}
      >
      <>
      <Head>
        <title>Pokedex</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <LoginModal session={user}/>
        <Pokedex />
      </main>
    </>
    </FavoriteProvider>
    
  );
}
